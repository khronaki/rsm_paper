\subsection{Hardware Requirements}
\label{sec:hw_req}
\begin{figure}[t]%
	\centering
	\includegraphics[width=1.0\columnwidth]{figures/hw_fig.pdf}
	\vspace{-0.5cm}
	\caption{SoC architecture including three types of cores: out of order, in-order and SRC.}
	\label{fig:hw}%
	\vspace{-0.3cm}
\end{figure}
As described in the previous section, {\proposal} assumes the existence of a specialized hardware that accelerates the task creation step. The SRT is bound to this task creation accelerator and executes the requests in the RRQ. Previous work has proposed custom accelerators for the runtime activity~\cite{TaskSS, Xubin, Nexus, Swarm, TMU, Carbon}. These proposals significantly accelerate (up to three orders of magnitude) different bottlenecks of the runtime system\footnote{Section~\ref{sec:related} further describes these proposals.}. However, these special purpose hardware can only execute runtime system activity.

As an alternative, in our envisioned architecture we propose to have a general purpose core that has been optimized to run the runtime system activity more efficiently. Figure~\ref{fig:hw} shows the envisioned asymmetric multicore architecture with different core types. This architecture combines simple in-order cores with fast out-of-order cores and a specialized runtime core (SRC) for the SRT. The SRC can optimize its architecture for this specific SRT, having a different cache hierarchy and pipeline configuration. As a result, the SRC executes the SRT much faster than the other cores. The SRC can also execute tasks, but will achieve worse performance than the other cores as its hardware structures have been optimized for a specific software (the SRT).

To evaluate our approach we study the requirements of the SRC in order to provide enough performance for {\proposal}.
Based on the analysis by Etsion et al.~\cite{TaskSS}, there is a certain \textit{task decode rate} that leads to optimal utilization of the multi-core system.
This rule can be applied in the case of {\proposal} for the \textit{task creation rate}, i.e. the frequency of task generation of the runtime system.
If the \textit{task creation rate} is higher than the \textit{task execution rate}, then for a highly parallel application the resources will always have tasks to execute and they will not remain idle.
To achieve a high \textit{task creation rate}, we can accelerate the task creation cost.
Equation~\ref{eq.create} shows the maximum optimal task creation cost, $C_{opt}(x)$ in order to keep $x$ cores busy, without starving due to task creation.

\begingroup\makeatletter\def\f@size{9}\check@mathfonts
\begin{equation}
  \text{$C_{opt}(x) = avg.\ task\ duration / x$ }
\label{eq.create}
\end{equation}
\endgroup

If $C_{gp}$ is the cost of task creation when it is performed on a general purpose core, then the SRC has to achieve a speedup of $r = C_{gp}/C_{opt}(x)$ to achieve full utilization of the system. As we will see in Section~\ref{sec:evaluation}, a modest and implementable value of $r=16\times$ is enough to significantly accelerate execution in a 512-core system.

Finally, if {\proposal} executes on a regular processor without the SRC core, the SRT is bound to a regular core without any further modification. In this scenario, applications will not significantly benefit from having a separate SRT.



